#cloud-config

coreos:
    etcd:
        addr: $private_ipv4:4001
        peer-addr: $private_ipv4:7001
        # runing a multi-node cluster with discovery mode:
        # generate a new token for each unique cluster from https://discovery.etcd.io/new
        # WARNING: replace each time you 'vagrant destroy'
        #discovery: https://discovery.etcd.io/<token>
    fleet:
        public-ip: $private_ipv4
    units:
        - name: etcd.service
          command: start
        - name: fleet.service
          command: start
        - name: docker.service
          command: start
          content: |
              .include /usr/lib/systemd/system/docker.service
            
              [Service]
              # Use our own dns, instead of the host's.
              EnvironmentFile=/var/lib/skydns/env
              ExecStart=
              ExecStart=/usr/bin/docker daemon -r=false -H fd:// --dns=$private_ipv4 --dns-search=${DOMAIN}
        - name: docker-tcp.socket
          command: start
          enable: true
          content: |
              [Unit]
              Description=Docker Socket for the API
              
              [Socket]
              ListenStream=2375
              Service=docker.service
              BindIPv6Only=both
              
              [Install] 
              WantedBy=sockets.target

        - name: skydns-install.service
          command: start
          content: |
              [Unit]
              Description=SkyDNS Installer
              
              [Service]
              Type=oneshot
              RemainAfterExit=true
              EnvironmentFile=/var/lib/skydns/env
              ExecStart=-/bin/mkdir -p ${SKYDNS_HOME}/bin
              ExecStart=/usr/bin/bash -c "[ -x ${SKYDNS_CMD} ] || curl -L -o ${SKYDNS_CMD} ${SKYDNS_CMD_REPO} && chmod 755 ${SKYDNS_CMD}" 
        - name: skydns.service
          command: start
          content: |
              [Unit]
              Description=skydns
              Requires=skydns-install.service
              Requires=etcd.service
              After=skydns-install.service
              After=etcd.service
              
              [Service]  
              Type=simple
              Restart=always
              RestartSec=5
              EnvironmentFile=/etc/environment
              EnvironmentFile=/var/lib/skydns/env
              PermissionsStartOnly=true
              # For DNS to work properly SkyDNS needs to tell peers its nameservers. i.e. ns=<private_ip>
              ExecStartPre=/usr/bin/sh -c "etcdctl get ${DNS_NAMESERVER_PATH} > /dev/null || etcdctl set ${DNS_NAMESERVER_PATH} {host:${COREOS_PRIVATE_IPV4}}"
              ExecStartPre=/usr/bin/etcdctl set ${DOMAIN_PATH}/%H '{"host":"${COREOS_PRIVATE_IPV4}"}'
              # Set skydns configuration in etcd
              ExecStartPre=/usr/bin/etcdctl set /skydns/config ${SKYDNS_CONFIG}
              ExecStart=/usr/bin/bash -c ${SKYDNS_CMD}
              ExecStopPost=-/usr/bin/etcdctl rm /skydns/config
              ExecStopPost=-/usr/bin/etcdctl rm ${DNS_NAMESERVER_PATH} --with-value '{host:${COREOS_PRIVATE_IPV4}}'
              ExecStopPost=-/usr/bin/etcdctl rm ${DOMAIN_PATH}/%H
              
              [Install]  
              WantedBy=multi-user.target
              
        - name: confd-install.service
          command: start
          content: |
              [Unit]
              Description=confd installer
              
              [Service]
              Type=oneshot
              RemainAfterExit=true
              
              EnvironmentFile=/etc/environment
              EnvironmentFile=/var/lib/confd/env
              ExecStart=-/usr/bin/bash -c "[ -e ${CONFD_CMD} ] || mkdir -p ${CONFD_HOME}/{bin,conf.d,templates}"
              ExecStart=/usr/bin/bash -c "[ -x ${CONFD_CMD} ] || curl -L -o ${CONFD_CMD} ${CONFD_CMD_REPO} && chmod 755 ${CONFD_CMD}" 
              ExecStart=/usr/bin/chmod 755 ${CONFD_CMD}
              
              [Install]  
              WantedBy=multi-user.target
write_files:
  - path: /var/lib/skydns/env
    permissions: 0644
    owner: root
    content: |
        DOMAIN=docker.local
        DOMAIN_PATH=/skydns/local/docker
        DNS_NAMESERVER_PATH=/skydns/local/docker/dns/ns
        SKYDNS_CONFIG='{"domain":"docker.local", "dns_addr":"0.0.0.0:53", "ttl":3600, "nameservers": ["8.8.8.8:53","8.8.4.4:53"]}'
        SKYDNS_CMD_REPO=https://github.com/xuwang/skydns-docker/releases/download/skydns-7025dba3834f/skydns
        SKYDNS_HOME=/var/lib/skydns
        SKYDNS_CMD=/var/lib/skydns/bin/skydns
  - path: /etc/resolv.conf
    permissions: 0644
    owner: root
    content: |
      domain docker.local
      nameserver 127.0.0.1
      nameserver 8.8.8.8
  - path: /var/lib/confd/env
    permissions: 0644
    owner: root
    content: |      
      # env file for confd
      CONFD_HOME=/var/lib/confd      
      CONFD_CMD=/var/lib/confd/bin/confd
      CONFD_CMD_REPO=https://github.com/kelseyhightower/confd/releases/download/v0.5.0/confd-0.5.0-linux-amd64
      CONFD_OPTS= --debug \
              -verbose=true \
              -interval=10 \
              -node "127.0.0.1:4001" \
              -confdir /var/lib/confd
  - path: /etc/profile.d/alias.sh
    permissions: 0644
    owner: root
    content: |
        alias lal="ls -al"
        alias ll="ls -l"
        alias dk="docker "
        alias dkc="dk ps"
        alias dkm="dk images"
        alias dki="dk inspect"
        alias dkb="dk build"
        alias cleandkc="dkc -a --no-trunc| grep Exit | awk '{print \$1}' | xargs -L 1 -r docker rm"
        alias cleandkm="dkm -a --no-trunc | grep none | awk '{print \$3}' | xargs -L 1 -r docker rmi"
        alias cleandk="cleandkc && cleandkm"
        alias killdk="dk rm -f $(docker ps -qa)"
        alias sd="sudo systemctl"
        alias sdl="sd list-units"
        alias sds="sd status"
        alias sdcat="sd cat"
        alias cci="sudo coreos-cloudinit --from-file"
        alias j="journalctl"
        alias jfu="journalctl -f -u"
        alias e="etcdctl"
        alias els="e ls --recursive"
        alias eget="e get"
        alias eset="e set"
        alias f="fleetctl -strict-host-key-checking=false"
        alias fcat="f cat"
        alias fss="f status"
        alias fst="f start"
        alias fdy="f destroy"
        alias flm="f list-machines"
        alias flu="f list-units"
        alias fsh="f ssh"
        function dkip() { docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1 ; }
        function dkid() { docker inspect --format "{{ .ID }}" $1 ; }
        function dkim() { docker inspect --format "{{ .Image }}" $1 ; }
        function dkst() { docker inspect --format "{{ .State.Running }}" $1 ; }
        function sdrit() { sudo docker run -i -t $1 bash ; }
        function nsa { sudo nsenter -p -u -m -i -n -t $(docker inspect -f "{{ .State.Pid }}" $1) ; }
